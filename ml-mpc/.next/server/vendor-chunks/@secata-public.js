"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@secata-public";
exports.ids = ["vendor-chunks/@secata-public"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BigEndianByteInput.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@secata-public/bitmanipulation-ts/target/main/BigEndianByteInput.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BigEndianByteInput = void 0;\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(action-browser)/./node_modules/bn.js/lib/bn.js\"));\n/**\n * Reader of an input stream, can read different types of basic types. Reads in big-endian format.\n */\nclass BigEndianByteInput {\n    /**\n     * Creates a new big-endian stream based on an input buffer.\n     * @param buffer the buffer to wrap.\n     */\n    constructor(buffer) {\n        this.offset = 0;\n        this.buffer = buffer;\n    }\n    /**\n     * @inheritDoc\n     */\n    readBoolean() {\n        const bool = this.buffer.readUInt8(this.offset) !== 0;\n        this.offset++;\n        return bool;\n    }\n    /**\n     * @inheritDoc\n     */\n    readBytes(noBytes) {\n        const buffer = this.buffer.slice(this.offset, this.offset + noBytes);\n        this.offset += noBytes;\n        if (buffer.length !== noBytes) {\n            throw new Error(\"Unable to read bytes\");\n        }\n        return buffer;\n    }\n    /**\n     * @inheritDoc\n     */\n    readI8() {\n        const byte = this.buffer.readInt8(this.offset);\n        this.offset++;\n        return byte;\n    }\n    /**\n     * @inheritDoc\n     */\n    readI16() {\n        const short = this.buffer.readInt16BE(this.offset);\n        this.offset += 2;\n        return short;\n    }\n    /**\n     * @inheritDoc\n     */\n    readI32() {\n        const int = this.buffer.readInt32BE(this.offset);\n        this.offset += 4;\n        return int;\n    }\n    /**\n     * @inheritDoc\n     */\n    readI64() {\n        return this.readSignedBigInteger(8);\n    }\n    /**\n     * @inheritDoc\n     */\n    readSignedBigInteger(noBytes) {\n        const buffer = this.readBytes(noBytes);\n        // Stryker disable next-line StringLiteral: is equivalent to new BN(buffer, \"\"), but \"be\" kept for clarity\n        return new bn_js_1.default(buffer, \"be\").fromTwos(8 * noBytes);\n    }\n    /**\n     * @inheritDoc\n     */\n    readU8() {\n        const byte = this.buffer.readUInt8(this.offset);\n        this.offset++;\n        return byte;\n    }\n    /**\n     * @inheritDoc\n     */\n    readU16() {\n        const short = this.buffer.readUInt16BE(this.offset);\n        this.offset += 2;\n        return short;\n    }\n    /**\n     * @inheritDoc\n     */\n    readU32() {\n        const int = this.buffer.readUInt32BE(this.offset);\n        this.offset += 4;\n        return int;\n    }\n    /**\n     * @inheritDoc\n     */\n    readU64() {\n        return this.readUnsignedBigInteger(8);\n    }\n    /**\n     * @inheritDoc\n     */\n    readUnsignedBigInteger(noBytes) {\n        const buffer = this.readBytes(noBytes);\n        // Stryker disable next-line StringLiteral: is equivalent to new BN(buffer, \"\"), but \"be\" kept for clarity\n        return new bn_js_1.default(buffer, \"be\");\n    }\n    /**\n     * @inheritDoc\n     */\n    readString() {\n        const stringLength = this.readI32();\n        return this.readBytes(stringLength).toString(\"utf8\");\n    }\n    /**\n     * @inheritDoc\n     */\n    readRemaining() {\n        return this.readBytes(this.buffer.length - this.offset);\n    }\n    /**\n     * @inheritDoc\n     */\n    skipBytes(skip) {\n        if (skip < 0) {\n            throw new Error(\"Must skip a non negative number of bytes\");\n        }\n        if (this.buffer.length < this.offset + skip) {\n            throw new Error(\"Cannot skip past buffer size\");\n        }\n        this.offset += skip;\n    }\n}\nexports.BigEndianByteInput = BigEndianByteInput;\n//# sourceMappingURL=BigEndianByteInput.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2VjYXRhLXB1YmxpYy9iaXRtYW5pcHVsYXRpb24tdHMvdGFyZ2V0L21haW4vQmlnRW5kaWFuQnl0ZUlucHV0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLGdDQUFnQyxtQkFBTyxDQUFDLDhEQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9Ac2VjYXRhLXB1YmxpYy9iaXRtYW5pcHVsYXRpb24tdHMvdGFyZ2V0L21haW4vQmlnRW5kaWFuQnl0ZUlucHV0LmpzPzFlYzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJpZ0VuZGlhbkJ5dGVJbnB1dCA9IHZvaWQgMDtcbmNvbnN0IGJuX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJuLmpzXCIpKTtcbi8qKlxuICogUmVhZGVyIG9mIGFuIGlucHV0IHN0cmVhbSwgY2FuIHJlYWQgZGlmZmVyZW50IHR5cGVzIG9mIGJhc2ljIHR5cGVzLiBSZWFkcyBpbiBiaWctZW5kaWFuIGZvcm1hdC5cbiAqL1xuY2xhc3MgQmlnRW5kaWFuQnl0ZUlucHV0IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGJpZy1lbmRpYW4gc3RyZWFtIGJhc2VkIG9uIGFuIGlucHV0IGJ1ZmZlci5cbiAgICAgKiBAcGFyYW0gYnVmZmVyIHRoZSBidWZmZXIgdG8gd3JhcC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihidWZmZXIpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICByZWFkQm9vbGVhbigpIHtcbiAgICAgICAgY29uc3QgYm9vbCA9IHRoaXMuYnVmZmVyLnJlYWRVSW50OCh0aGlzLm9mZnNldCkgIT09IDA7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHJldHVybiBib29sO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHJlYWRCeXRlcyhub0J5dGVzKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIG5vQnl0ZXMpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSBub0J5dGVzO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCAhPT0gbm9CeXRlcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHJlYWQgYnl0ZXNcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICByZWFkSTgoKSB7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSB0aGlzLmJ1ZmZlci5yZWFkSW50OCh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHJldHVybiBieXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHJlYWRJMTYoKSB7XG4gICAgICAgIGNvbnN0IHNob3J0ID0gdGhpcy5idWZmZXIucmVhZEludDE2QkUodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gc2hvcnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZEkzMigpIHtcbiAgICAgICAgY29uc3QgaW50ID0gdGhpcy5idWZmZXIucmVhZEludDMyQkUodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gaW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHJlYWRJNjQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRTaWduZWRCaWdJbnRlZ2VyKDgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHJlYWRTaWduZWRCaWdJbnRlZ2VyKG5vQnl0ZXMpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5yZWFkQnl0ZXMobm9CeXRlcyk7XG4gICAgICAgIC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgU3RyaW5nTGl0ZXJhbDogaXMgZXF1aXZhbGVudCB0byBuZXcgQk4oYnVmZmVyLCBcIlwiKSwgYnV0IFwiYmVcIiBrZXB0IGZvciBjbGFyaXR5XG4gICAgICAgIHJldHVybiBuZXcgYm5fanNfMS5kZWZhdWx0KGJ1ZmZlciwgXCJiZVwiKS5mcm9tVHdvcyg4ICogbm9CeXRlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZFU4KCkge1xuICAgICAgICBjb25zdCBieXRlID0gdGhpcy5idWZmZXIucmVhZFVJbnQ4KHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgcmV0dXJuIGJ5dGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZFUxNigpIHtcbiAgICAgICAgY29uc3Qgc2hvcnQgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDE2QkUodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gc2hvcnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZFUzMigpIHtcbiAgICAgICAgY29uc3QgaW50ID0gdGhpcy5idWZmZXIucmVhZFVJbnQzMkJFKHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIGludDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICByZWFkVTY0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkVW5zaWduZWRCaWdJbnRlZ2VyKDgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHJlYWRVbnNpZ25lZEJpZ0ludGVnZXIobm9CeXRlcykge1xuICAgICAgICBjb25zdCBidWZmZXIgPSB0aGlzLnJlYWRCeXRlcyhub0J5dGVzKTtcbiAgICAgICAgLy8gU3RyeWtlciBkaXNhYmxlIG5leHQtbGluZSBTdHJpbmdMaXRlcmFsOiBpcyBlcXVpdmFsZW50IHRvIG5ldyBCTihidWZmZXIsIFwiXCIpLCBidXQgXCJiZVwiIGtlcHQgZm9yIGNsYXJpdHlcbiAgICAgICAgcmV0dXJuIG5ldyBibl9qc18xLmRlZmF1bHQoYnVmZmVyLCBcImJlXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHJlYWRTdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ0xlbmd0aCA9IHRoaXMucmVhZEkzMigpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkQnl0ZXMoc3RyaW5nTGVuZ3RoKS50b1N0cmluZyhcInV0ZjhcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZFJlbWFpbmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZEJ5dGVzKHRoaXMuYnVmZmVyLmxlbmd0aCAtIHRoaXMub2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBza2lwQnl0ZXMoc2tpcCkge1xuICAgICAgICBpZiAoc2tpcCA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk11c3Qgc2tpcCBhIG5vbiBuZWdhdGl2ZSBudW1iZXIgb2YgYnl0ZXNcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8IHRoaXMub2Zmc2V0ICsgc2tpcCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNraXAgcGFzdCBidWZmZXIgc2l6ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9mZnNldCArPSBza2lwO1xuICAgIH1cbn1cbmV4cG9ydHMuQmlnRW5kaWFuQnl0ZUlucHV0ID0gQmlnRW5kaWFuQnl0ZUlucHV0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmlnRW5kaWFuQnl0ZUlucHV0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BigEndianByteInput.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BigEndianByteOutput.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@secata-public/bitmanipulation-ts/target/main/BigEndianByteOutput.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BigEndianByteOutput = void 0;\n/**\n * Writer to an output stream, can write different types of basic types. Write in big-endian format.\n */\nclass BigEndianByteOutput {\n    /**\n     * Creates a BigEndianByteOutput, runs the serialization and returns the bytes.\n     * @param serializer the serialization to happen\n     * @returns the serialized bytes\n     */\n    static serialize(serializer) {\n        const out = new BigEndianByteOutput();\n        serializer(out);\n        return out.toBuffer();\n    }\n    /**\n     * Creates a new big-endian stream.\n     */\n    constructor() {\n        this.appendBuffer = (buffer) => {\n            this.buffer = Buffer.concat([this.buffer, buffer]);\n        };\n        this.buffer = Buffer.alloc(0);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeBytes(values) {\n        this.appendBuffer(values);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeBoolean(value) {\n        const buffer = Buffer.alloc(1);\n        buffer.writeUInt8(value ? 1 : 0, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeI8(value) {\n        const buffer = Buffer.alloc(1);\n        buffer.writeInt8(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeI16(value) {\n        const buffer = Buffer.alloc(2);\n        buffer.writeInt16BE(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeI32(value) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeInt32BE(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeI64(value) {\n        this.writeSignedBigInteger(value, 8);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeSignedBigInteger(value, noBytes) {\n        if (value.byteLength() > noBytes) {\n            throw new Error(`Cannot write BN as ${noBytes} bytes; requires at least ${value.byteLength()} bytes`);\n        }\n        // Stryker disable next-line StringLiteral: \"\" defaults to \"be\", but argument kept for clarity\n        const buffer = value.toTwos(noBytes * 8).toArrayLike(Buffer, \"be\", noBytes);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeU8(value) {\n        const buffer = Buffer.alloc(1);\n        buffer.writeUInt8(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeU16(value) {\n        const buffer = Buffer.alloc(2);\n        buffer.writeUInt16BE(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeU32(value) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeUInt32BE(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeU64(value) {\n        this.writeUnsignedBigInteger(value, 8);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeUnsignedBigInteger(value, noBytes) {\n        if (value.cmpn(0) === -1) {\n            throw new Error(\"Value must be non negative\");\n        }\n        if (value.byteLength() > noBytes) {\n            throw new Error(`Cannot write BN as ${noBytes} bytes; requires at least ${value.byteLength()} bytes`);\n        }\n        // Stryker disable next-line StringLiteral: \"\" defaults to \"be\", but argument kept for clarity\n        const buffer = value.toArrayLike(Buffer, \"be\", noBytes);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeString(value) {\n        // Stryker disable next-line StringLiteral: is equivalent to Buffer.from(value, \"\"), but \"utf8\" kept for clarity\n        const strBuffer = Buffer.from(value, \"utf8\");\n        this.writeI32(strBuffer.length);\n        this.appendBuffer(strBuffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    toBuffer() {\n        return this.buffer;\n    }\n}\nexports.BigEndianByteOutput = BigEndianByteOutput;\n//# sourceMappingURL=BigEndianByteOutput.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2VjYXRhLXB1YmxpYy9iaXRtYW5pcHVsYXRpb24tdHMvdGFyZ2V0L21haW4vQmlnRW5kaWFuQnl0ZU91dHB1dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFNBQVMsT0FBTyxvQkFBb0Isb0JBQW9CO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFNBQVMsT0FBTyxvQkFBb0Isb0JBQW9CO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQHNlY2F0YS1wdWJsaWMvYml0bWFuaXB1bGF0aW9uLXRzL3RhcmdldC9tYWluL0JpZ0VuZGlhbkJ5dGVPdXRwdXQuanM/ZjMzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmlnRW5kaWFuQnl0ZU91dHB1dCA9IHZvaWQgMDtcbi8qKlxuICogV3JpdGVyIHRvIGFuIG91dHB1dCBzdHJlYW0sIGNhbiB3cml0ZSBkaWZmZXJlbnQgdHlwZXMgb2YgYmFzaWMgdHlwZXMuIFdyaXRlIGluIGJpZy1lbmRpYW4gZm9ybWF0LlxuICovXG5jbGFzcyBCaWdFbmRpYW5CeXRlT3V0cHV0IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgQmlnRW5kaWFuQnl0ZU91dHB1dCwgcnVucyB0aGUgc2VyaWFsaXphdGlvbiBhbmQgcmV0dXJucyB0aGUgYnl0ZXMuXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZXIgdGhlIHNlcmlhbGl6YXRpb24gdG8gaGFwcGVuXG4gICAgICogQHJldHVybnMgdGhlIHNlcmlhbGl6ZWQgYnl0ZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgc2VyaWFsaXplKHNlcmlhbGl6ZXIpIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IEJpZ0VuZGlhbkJ5dGVPdXRwdXQoKTtcbiAgICAgICAgc2VyaWFsaXplcihvdXQpO1xuICAgICAgICByZXR1cm4gb3V0LnRvQnVmZmVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYmlnLWVuZGlhbiBzdHJlYW0uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kQnVmZmVyID0gKGJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmJ1ZmZlciwgYnVmZmVyXSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jKDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlQnl0ZXModmFsdWVzKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kQnVmZmVyKHZhbHVlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgd3JpdGVCb29sZWFuKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygxKTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDgodmFsdWUgPyAxIDogMCwgMCk7XG4gICAgICAgIHRoaXMuYXBwZW5kQnVmZmVyKGJ1ZmZlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgd3JpdGVJOCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2MoMSk7XG4gICAgICAgIGJ1ZmZlci53cml0ZUludDgodmFsdWUsIDApO1xuICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihidWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlSTE2KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygyKTtcbiAgICAgICAgYnVmZmVyLndyaXRlSW50MTZCRSh2YWx1ZSwgMCk7XG4gICAgICAgIHRoaXMuYXBwZW5kQnVmZmVyKGJ1ZmZlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgd3JpdGVJMzIodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgICAgICBidWZmZXIud3JpdGVJbnQzMkJFKHZhbHVlLCAwKTtcbiAgICAgICAgdGhpcy5hcHBlbmRCdWZmZXIoYnVmZmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICB3cml0ZUk2NCh2YWx1ZSkge1xuICAgICAgICB0aGlzLndyaXRlU2lnbmVkQmlnSW50ZWdlcih2YWx1ZSwgOCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgd3JpdGVTaWduZWRCaWdJbnRlZ2VyKHZhbHVlLCBub0J5dGVzKSB7XG4gICAgICAgIGlmICh2YWx1ZS5ieXRlTGVuZ3RoKCkgPiBub0J5dGVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB3cml0ZSBCTiBhcyAke25vQnl0ZXN9IGJ5dGVzOyByZXF1aXJlcyBhdCBsZWFzdCAke3ZhbHVlLmJ5dGVMZW5ndGgoKX0gYnl0ZXNgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdHJ5a2VyIGRpc2FibGUgbmV4dC1saW5lIFN0cmluZ0xpdGVyYWw6IFwiXCIgZGVmYXVsdHMgdG8gXCJiZVwiLCBidXQgYXJndW1lbnQga2VwdCBmb3IgY2xhcml0eVxuICAgICAgICBjb25zdCBidWZmZXIgPSB2YWx1ZS50b1R3b3Mobm9CeXRlcyAqIDgpLnRvQXJyYXlMaWtlKEJ1ZmZlciwgXCJiZVwiLCBub0J5dGVzKTtcbiAgICAgICAgdGhpcy5hcHBlbmRCdWZmZXIoYnVmZmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICB3cml0ZVU4KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygxKTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDgodmFsdWUsIDApO1xuICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihidWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlVTE2KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygyKTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDE2QkUodmFsdWUsIDApO1xuICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihidWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlVTMyKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDMyQkUodmFsdWUsIDApO1xuICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihidWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlVTY0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMud3JpdGVVbnNpZ25lZEJpZ0ludGVnZXIodmFsdWUsIDgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlVW5zaWduZWRCaWdJbnRlZ2VyKHZhbHVlLCBub0J5dGVzKSB7XG4gICAgICAgIGlmICh2YWx1ZS5jbXBuKDApID09PSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUgbXVzdCBiZSBub24gbmVnYXRpdmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLmJ5dGVMZW5ndGgoKSA+IG5vQnl0ZXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHdyaXRlIEJOIGFzICR7bm9CeXRlc30gYnl0ZXM7IHJlcXVpcmVzIGF0IGxlYXN0ICR7dmFsdWUuYnl0ZUxlbmd0aCgpfSBieXRlc2ApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgU3RyaW5nTGl0ZXJhbDogXCJcIiBkZWZhdWx0cyB0byBcImJlXCIsIGJ1dCBhcmd1bWVudCBrZXB0IGZvciBjbGFyaXR5XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHZhbHVlLnRvQXJyYXlMaWtlKEJ1ZmZlciwgXCJiZVwiLCBub0J5dGVzKTtcbiAgICAgICAgdGhpcy5hcHBlbmRCdWZmZXIoYnVmZmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICB3cml0ZVN0cmluZyh2YWx1ZSkge1xuICAgICAgICAvLyBTdHJ5a2VyIGRpc2FibGUgbmV4dC1saW5lIFN0cmluZ0xpdGVyYWw6IGlzIGVxdWl2YWxlbnQgdG8gQnVmZmVyLmZyb20odmFsdWUsIFwiXCIpLCBidXQgXCJ1dGY4XCIga2VwdCBmb3IgY2xhcml0eVxuICAgICAgICBjb25zdCBzdHJCdWZmZXIgPSBCdWZmZXIuZnJvbSh2YWx1ZSwgXCJ1dGY4XCIpO1xuICAgICAgICB0aGlzLndyaXRlSTMyKHN0ckJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihzdHJCdWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHRvQnVmZmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXI7XG4gICAgfVxufVxuZXhwb3J0cy5CaWdFbmRpYW5CeXRlT3V0cHV0ID0gQmlnRW5kaWFuQnl0ZU91dHB1dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJpZ0VuZGlhbkJ5dGVPdXRwdXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BigEndianByteOutput.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BitInput.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@secata-public/bitmanipulation-ts/target/main/BitInput.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BitInput = void 0;\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(action-browser)/./node_modules/bn.js/lib/bn.js\"));\n/**\n * Reader of an input stream. Able to read numbers with variable bit length. E.g. two numbers\n * followed by five booleans and then a BN is read from the stream perceived as a consecutive bit\n * array, the first 8 bytes is allocated to the two numbers, the next byte has five bits allocated\n * to booleans, the next 3 bits, plus the next 8 bytes is the BN.\n */\nclass BitInput {\n    /**\n     * Create a new BitInput that reads the buffer given.\n     * @param buffer the buffer to be read\n     */\n    constructor(buffer) {\n        this.offset = 0;\n        this.bitIndex = 0;\n        this.buffer = buffer;\n    }\n    /**\n     * Return a byte buffer of the specified length read from the next bytes.\n     * @param byteLength the number of bytes to read\n     * @returns the read buffer\n     */\n    readBytes(byteLength) {\n        // Stryker disable next-line ConditionalExpression\n        if (this.bitIndex === 0) {\n            return this.readBytesBytewise(byteLength);\n        }\n        else {\n            return this.readBytesBitwise(byteLength);\n        }\n    }\n    /**\n     * Reads the next 8 * byteLength bits one bit at a time and returns them as a byte array with\n     * length byteLength.\n     * @param byteLength the number of bytes to read\n     * @returns the read bytes\n     */\n    readBytesBitwise(byteLength) {\n        const buffer = Buffer.alloc(byteLength);\n        for (let i = 0; i < byteLength; i++) {\n            buffer[i] = this.readUnsignedNumber(8);\n        }\n        return buffer;\n    }\n    /**\n     * Reads the next byteLength bytes from the stream and returns them as a byte array. Assumes that\n     * bitIndex is 0 such that the read bytes matches the next bytes of the BitInput stream.\n     * @param byteLength the number of bytes to read\n     * @returns the read bytes\n     */\n    readBytesBytewise(byteLength) {\n        if (this.offset + byteLength > this.buffer.length) {\n            throw new Error(\"Reached end of buffer\");\n        }\n        const buffer = this.buffer.slice(this.offset, this.offset + byteLength);\n        this.offset += byteLength;\n        return buffer;\n    }\n    /**\n     * Read an unsigned BN of the specified number of bits.\n     * @param bitLength the number of bits to read\n     * @returns the BN created from the read bits\n     */\n    readUnsignedBN(bitLength) {\n        let sum = BitInput.ZERO;\n        for (let i = 0; i < bitLength; i++) {\n            if (this.readBoolean()) {\n                sum = sum.add(BitInput.ONE.shln(i));\n            }\n        }\n        return sum;\n    }\n    /**\n     * Read an unsigned number of the specified number of bits.\n     * @param bitLength the number of bits to read\n     * @returns the number created from the read bits\n     */\n    readUnsignedNumber(bitLength) {\n        if (bitLength > 53) {\n            throw new Error(\">53 bit numbers must be read using BitInput#readUnsignedBN\");\n        }\n        return this.readUnsignedBN(bitLength).toNumber();\n    }\n    /**\n     * Read a signed BN of the specified number of bits.\n     * @param bitLength the number of bits to read\n     * @returns the BN created from the read bits\n     */\n    readSignedBN(bitLength) {\n        const unsigned = this.readUnsignedBN(bitLength);\n        if (unsigned.shrn(bitLength - 1).eqn(1)) {\n            const max = BitInput.ONE.shln(bitLength);\n            return unsigned.sub(max);\n        }\n        return unsigned;\n    }\n    /**\n     * Read a signed number of the specified number of bits.\n     * @param bitLength the number of bits to read\n     * @returns the number created from the read bits\n     */\n    readSignedNumber(bitLength) {\n        if (bitLength > 53) {\n            throw new Error(\">53 bit numbers must be read using BitInput#readSignedBN\");\n        }\n        return this.readSignedBN(bitLength).toNumber();\n    }\n    /**\n     * Read the next boolean.\n     * @returns the read boolean\n     */\n    readBoolean() {\n        if (this.offset >= this.buffer.length) {\n            throw new Error(\"Reached end of buffer\");\n        }\n        const value = this.buffer[this.offset];\n        const isBitSet = (value & (1 << this.bitIndex)) > 0;\n        this.bitIndex++;\n        if (this.bitIndex === 8) {\n            this.bitIndex = 0;\n            this.offset++;\n        }\n        return isBitSet;\n    }\n}\nexports.BitInput = BitInput;\nBitInput.ZERO = new bn_js_1.default(0);\nBitInput.ONE = new bn_js_1.default(1);\n//# sourceMappingURL=BitInput.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2VjYXRhLXB1YmxpYy9iaXRtYW5pcHVsYXRpb24tdHMvdGFyZ2V0L21haW4vQml0SW5wdXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsZ0NBQWdDLG1CQUFPLENBQUMsOERBQU87QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZUFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQHNlY2F0YS1wdWJsaWMvYml0bWFuaXB1bGF0aW9uLXRzL3RhcmdldC9tYWluL0JpdElucHV0LmpzP2U5ODMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJpdElucHV0ID0gdm9pZCAwO1xuY29uc3QgYm5fanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYm4uanNcIikpO1xuLyoqXG4gKiBSZWFkZXIgb2YgYW4gaW5wdXQgc3RyZWFtLiBBYmxlIHRvIHJlYWQgbnVtYmVycyB3aXRoIHZhcmlhYmxlIGJpdCBsZW5ndGguIEUuZy4gdHdvIG51bWJlcnNcbiAqIGZvbGxvd2VkIGJ5IGZpdmUgYm9vbGVhbnMgYW5kIHRoZW4gYSBCTiBpcyByZWFkIGZyb20gdGhlIHN0cmVhbSBwZXJjZWl2ZWQgYXMgYSBjb25zZWN1dGl2ZSBiaXRcbiAqIGFycmF5LCB0aGUgZmlyc3QgOCBieXRlcyBpcyBhbGxvY2F0ZWQgdG8gdGhlIHR3byBudW1iZXJzLCB0aGUgbmV4dCBieXRlIGhhcyBmaXZlIGJpdHMgYWxsb2NhdGVkXG4gKiB0byBib29sZWFucywgdGhlIG5leHQgMyBiaXRzLCBwbHVzIHRoZSBuZXh0IDggYnl0ZXMgaXMgdGhlIEJOLlxuICovXG5jbGFzcyBCaXRJbnB1dCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEJpdElucHV0IHRoYXQgcmVhZHMgdGhlIGJ1ZmZlciBnaXZlbi5cbiAgICAgKiBAcGFyYW0gYnVmZmVyIHRoZSBidWZmZXIgdG8gYmUgcmVhZFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGJ1ZmZlcikge1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuYml0SW5kZXggPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgYnl0ZSBidWZmZXIgb2YgdGhlIHNwZWNpZmllZCBsZW5ndGggcmVhZCBmcm9tIHRoZSBuZXh0IGJ5dGVzLlxuICAgICAqIEBwYXJhbSBieXRlTGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVhZFxuICAgICAqIEByZXR1cm5zIHRoZSByZWFkIGJ1ZmZlclxuICAgICAqL1xuICAgIHJlYWRCeXRlcyhieXRlTGVuZ3RoKSB7XG4gICAgICAgIC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgQ29uZGl0aW9uYWxFeHByZXNzaW9uXG4gICAgICAgIGlmICh0aGlzLmJpdEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkQnl0ZXNCeXRld2lzZShieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRCeXRlc0JpdHdpc2UoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHMgdGhlIG5leHQgOCAqIGJ5dGVMZW5ndGggYml0cyBvbmUgYml0IGF0IGEgdGltZSBhbmQgcmV0dXJucyB0aGVtIGFzIGEgYnl0ZSBhcnJheSB3aXRoXG4gICAgICogbGVuZ3RoIGJ5dGVMZW5ndGguXG4gICAgICogQHBhcmFtIGJ5dGVMZW5ndGggdGhlIG51bWJlciBvZiBieXRlcyB0byByZWFkXG4gICAgICogQHJldHVybnMgdGhlIHJlYWQgYnl0ZXNcbiAgICAgKi9cbiAgICByZWFkQnl0ZXNCaXR3aXNlKGJ5dGVMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKGJ5dGVMZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYnVmZmVyW2ldID0gdGhpcy5yZWFkVW5zaWduZWROdW1iZXIoOCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHMgdGhlIG5leHQgYnl0ZUxlbmd0aCBieXRlcyBmcm9tIHRoZSBzdHJlYW0gYW5kIHJldHVybnMgdGhlbSBhcyBhIGJ5dGUgYXJyYXkuIEFzc3VtZXMgdGhhdFxuICAgICAqIGJpdEluZGV4IGlzIDAgc3VjaCB0aGF0IHRoZSByZWFkIGJ5dGVzIG1hdGNoZXMgdGhlIG5leHQgYnl0ZXMgb2YgdGhlIEJpdElucHV0IHN0cmVhbS5cbiAgICAgKiBAcGFyYW0gYnl0ZUxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRvIHJlYWRcbiAgICAgKiBAcmV0dXJucyB0aGUgcmVhZCBieXRlc1xuICAgICAqL1xuICAgIHJlYWRCeXRlc0J5dGV3aXNlKGJ5dGVMZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVhY2hlZCBlbmQgb2YgYnVmZmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGJ5dGVMZW5ndGgpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSBieXRlTGVuZ3RoO1xuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkIGFuIHVuc2lnbmVkIEJOIG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGJpdHMuXG4gICAgICogQHBhcmFtIGJpdExlbmd0aCB0aGUgbnVtYmVyIG9mIGJpdHMgdG8gcmVhZFxuICAgICAqIEByZXR1cm5zIHRoZSBCTiBjcmVhdGVkIGZyb20gdGhlIHJlYWQgYml0c1xuICAgICAqL1xuICAgIHJlYWRVbnNpZ25lZEJOKGJpdExlbmd0aCkge1xuICAgICAgICBsZXQgc3VtID0gQml0SW5wdXQuWkVSTztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaXRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVhZEJvb2xlYW4oKSkge1xuICAgICAgICAgICAgICAgIHN1bSA9IHN1bS5hZGQoQml0SW5wdXQuT05FLnNobG4oaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdW07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYW4gdW5zaWduZWQgbnVtYmVyIG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGJpdHMuXG4gICAgICogQHBhcmFtIGJpdExlbmd0aCB0aGUgbnVtYmVyIG9mIGJpdHMgdG8gcmVhZFxuICAgICAqIEByZXR1cm5zIHRoZSBudW1iZXIgY3JlYXRlZCBmcm9tIHRoZSByZWFkIGJpdHNcbiAgICAgKi9cbiAgICByZWFkVW5zaWduZWROdW1iZXIoYml0TGVuZ3RoKSB7XG4gICAgICAgIGlmIChiaXRMZW5ndGggPiA1Mykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiPjUzIGJpdCBudW1iZXJzIG11c3QgYmUgcmVhZCB1c2luZyBCaXRJbnB1dCNyZWFkVW5zaWduZWRCTlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZWFkVW5zaWduZWRCTihiaXRMZW5ndGgpLnRvTnVtYmVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBzaWduZWQgQk4gb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgYml0cy5cbiAgICAgKiBAcGFyYW0gYml0TGVuZ3RoIHRoZSBudW1iZXIgb2YgYml0cyB0byByZWFkXG4gICAgICogQHJldHVybnMgdGhlIEJOIGNyZWF0ZWQgZnJvbSB0aGUgcmVhZCBiaXRzXG4gICAgICovXG4gICAgcmVhZFNpZ25lZEJOKGJpdExlbmd0aCkge1xuICAgICAgICBjb25zdCB1bnNpZ25lZCA9IHRoaXMucmVhZFVuc2lnbmVkQk4oYml0TGVuZ3RoKTtcbiAgICAgICAgaWYgKHVuc2lnbmVkLnNocm4oYml0TGVuZ3RoIC0gMSkuZXFuKDEpKSB7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBCaXRJbnB1dC5PTkUuc2hsbihiaXRMZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIHVuc2lnbmVkLnN1YihtYXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bnNpZ25lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIHNpZ25lZCBudW1iZXIgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgYml0cy5cbiAgICAgKiBAcGFyYW0gYml0TGVuZ3RoIHRoZSBudW1iZXIgb2YgYml0cyB0byByZWFkXG4gICAgICogQHJldHVybnMgdGhlIG51bWJlciBjcmVhdGVkIGZyb20gdGhlIHJlYWQgYml0c1xuICAgICAqL1xuICAgIHJlYWRTaWduZWROdW1iZXIoYml0TGVuZ3RoKSB7XG4gICAgICAgIGlmIChiaXRMZW5ndGggPiA1Mykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiPjUzIGJpdCBudW1iZXJzIG11c3QgYmUgcmVhZCB1c2luZyBCaXRJbnB1dCNyZWFkU2lnbmVkQk5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFNpZ25lZEJOKGJpdExlbmd0aCkudG9OdW1iZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCB0aGUgbmV4dCBib29sZWFuLlxuICAgICAqIEByZXR1cm5zIHRoZSByZWFkIGJvb2xlYW5cbiAgICAgKi9cbiAgICByZWFkQm9vbGVhbigpIHtcbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0ID49IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVhY2hlZCBlbmQgb2YgYnVmZmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5idWZmZXJbdGhpcy5vZmZzZXRdO1xuICAgICAgICBjb25zdCBpc0JpdFNldCA9ICh2YWx1ZSAmICgxIDw8IHRoaXMuYml0SW5kZXgpKSA+IDA7XG4gICAgICAgIHRoaXMuYml0SW5kZXgrKztcbiAgICAgICAgaWYgKHRoaXMuYml0SW5kZXggPT09IDgpIHtcbiAgICAgICAgICAgIHRoaXMuYml0SW5kZXggPSAwO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNCaXRTZXQ7XG4gICAgfVxufVxuZXhwb3J0cy5CaXRJbnB1dCA9IEJpdElucHV0O1xuQml0SW5wdXQuWkVSTyA9IG5ldyBibl9qc18xLmRlZmF1bHQoMCk7XG5CaXRJbnB1dC5PTkUgPSBuZXcgYm5fanNfMS5kZWZhdWx0KDEpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Qml0SW5wdXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BitInput.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BitOutput.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@secata-public/bitmanipulation-ts/target/main/BitOutput.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BitOutput = void 0;\nconst index_1 = __webpack_require__(/*! ./index */ \"(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/index.js\");\n/**\n * Writer to an output stream. Able to write numbers with variable bit length. E.g. two numbers\n * followed by five booleans and then a BN is packed efficiently into the stream.\n */\nclass BitOutput {\n    constructor() {\n        this.index = 0;\n        this.bitSet = [];\n    }\n    /**\n     * Creates a BitOutput, runs the serialization and returns the bits as a compact bit array.\n     * @param serializer the serialization to happen\n     * @returns the serialized bits\n     */\n    static serializeBits(serializer) {\n        const out = new BitOutput();\n        serializer(out);\n        const length = out.writtenBits();\n        const data = out.toBuffer();\n        return { data, length };\n    }\n    /**\n     * Write a number of bytes from a byte buffer.\n     * @param buffer buffer containing the bytes to be written\n     * @param offset starting offset of byte buffer\n     * @param length number of bytes to write from offset\n     * @returns the BitOutput with the written bytes\n     */\n    writeBytes(buffer, offset = 0, length = buffer.length) {\n        // Stryker disable next-line ConditionalExpression\n        if (this.index === 0) {\n            for (let i = 0; i < length; i++) {\n                this.bitSet.push(buffer[i + offset]);\n            }\n        }\n        else {\n            for (let i = 0; i < length; i++) {\n                this.writeNumberBits(buffer[i + offset], 8);\n            }\n        }\n        return this;\n    }\n    /**\n     * Write the specified number of bits of an unsigned BN to this builder.\n     * @param value the unsigned BN to write\n     * @param bitLength the number of bits of the BN to write\n     * @returns the BitOutput with the written BN\n     */\n    writeUnsignedBN(value, bitLength) {\n        BitOutput.isValueValid(value, bitLength);\n        const fullBytes = bitLength >> 3;\n        const asBuffer = value.toArrayLike(Buffer, \"le\", fullBytes + 1);\n        this.writeBytes(asBuffer, 0, fullBytes);\n        const remainingBits = bitLength - fullBytes * 8;\n        this.writeNumberBits(asBuffer[fullBytes], remainingBits);\n        return this;\n    }\n    /**\n     * Write the specified number of bits of an unsigned number to this builder.\n     * @param value the unsigned number to write\n     * @param bitLength the number of bits of the number to write\n     * @returns the BitOutput with the written number\n     */\n    writeUnsignedNumber(value, bitLength) {\n        if (bitLength > 53) {\n            throw new Error(\">53 bit numbers must be written using BitOutput#writeUnsignedBN\");\n        }\n        return this.writeUnsignedBN(new index_1.BN(value), bitLength);\n    }\n    /**\n     * Writes a number one bit at a time.\n     * @param value the number to be written\n     * @param bitLength the number of bits to write\n     */\n    writeNumberBits(value, bitLength) {\n        for (let i = 0; i < bitLength; i++) {\n            const isBitSet = (value & (1 << i)) !== 0;\n            this.writeBoolean(isBitSet);\n        }\n        return this;\n    }\n    /**\n     * Write the specified number of bits of a signed BN to this builder.\n     * @param value the signed BN to write\n     * @param bitLength the number of bits of the BN to write\n     * @returns the BitOutput with the written BN\n     */\n    writeSignedBN(value, bitLength) {\n        BitOutput.isSignedValueValid(value, bitLength);\n        if (value.cmpn(0) === -1) {\n            const max = BitOutput.ONE.shln(bitLength);\n            return this.writeUnsignedBN(value.add(max), bitLength);\n        }\n        return this.writeUnsignedBN(value, bitLength);\n    }\n    /**\n     * Write the specified number of bits of a signed number to this builder.\n     * @param value the signed number to write\n     * @param bitLength the number of bits of the number to write\n     * @returns the BitOutput with the written number\n     */\n    writeSignedNumber(value, bitLength) {\n        if (bitLength > 53) {\n            throw new Error(\">53 bit numbers must be written using BitOutput#writeSignedBN\");\n        }\n        return this.writeSignedBN(new index_1.BN(value), bitLength);\n    }\n    /**\n     * Write the specified boolean to this builder.\n     * @param bool the boolean to write\n     * @returns the BitOutput with the written boolean\n     */\n    writeBoolean(bool) {\n        if (this.index === 0) {\n            this.bitSet.push(0);\n        }\n        if (bool) {\n            const bit = this.index;\n            this.bitSet[this.bitSet.length - 1] = this.bitSet[this.bitSet.length - 1] | (1 << bit);\n        }\n        this.index++;\n        if (this.index === 8) {\n            this.index = 0;\n        }\n        return this;\n    }\n    /**\n     * Gives the number of bits written so far.\n     * @returns the number of bits written\n     */\n    writtenBits() {\n        if (this.index === 0) {\n            return this.bitSet.length * 8;\n        }\n        else {\n            return this.bitSet.length * 8 - (8 - this.index);\n        }\n    }\n    /**\n     * Create a Buffer from the written values.\n     * @returns the created Buffer\n     */\n    toBuffer() {\n        return Buffer.from(this.bitSet);\n    }\n    static isValueValid(value, bitLength) {\n        const max = BitOutput.ONE.shln(bitLength).sub(BitOutput.ONE);\n        if (value.ltn(0) || value.gt(max)) {\n            throw new Error(value + \" cannot be represented as an unsigned \" + bitLength + \" bit number\");\n        }\n        return max;\n    }\n    static isSignedValueValid(value, bitLength) {\n        const max = BitOutput.ONE.shln(bitLength - 1).sub(BitOutput.ONE);\n        const min = BitOutput.ZERO.sub(BitOutput.ONE.shln(bitLength - 1));\n        if (value.gt(max) || value.lt(min)) {\n            throw new Error(value + \" cannot be represented as a signed \" + bitLength + \" bit number\");\n        }\n        return max;\n    }\n}\nexports.BitOutput = BitOutput;\nBitOutput.ONE = new index_1.BN(1);\nBitOutput.ZERO = new index_1.BN(0);\n//# sourceMappingURL=BitOutput.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BitOutput.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/LittleEndianByteInput.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@secata-public/bitmanipulation-ts/target/main/LittleEndianByteInput.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LittleEndianByteInput = void 0;\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(action-browser)/./node_modules/bn.js/lib/bn.js\"));\n/**\n * Reader of an input stream, can read different types of basic types. Reads in little-endian\n * format.\n */\nclass LittleEndianByteInput {\n    /**\n     * Creates a new little-endian stream based on an input buffer.\n     * @param buffer the buffer to wrap.\n     */\n    constructor(buffer) {\n        this.offset = 0;\n        this.buffer = buffer;\n    }\n    /**\n     * @inheritDoc\n     */\n    readBoolean() {\n        const bool = this.buffer.readUInt8(this.offset) !== 0;\n        this.offset++;\n        return bool;\n    }\n    /**\n     * @inheritDoc\n     */\n    readBytes(noBytes) {\n        const buffer = this.buffer.slice(this.offset, this.offset + noBytes);\n        this.offset += noBytes;\n        if (buffer.length !== noBytes) {\n            throw new Error(\"Unable to read bytes\");\n        }\n        return buffer;\n    }\n    /**\n     * @inheritDoc\n     */\n    readI8() {\n        const byte = this.buffer.readInt8(this.offset);\n        this.offset++;\n        return byte;\n    }\n    /**\n     * @inheritDoc\n     */\n    readI16() {\n        const short = this.buffer.readInt16LE(this.offset);\n        this.offset += 2;\n        return short;\n    }\n    /**\n     * @inheritDoc\n     */\n    readI32() {\n        const int = this.buffer.readInt32LE(this.offset);\n        this.offset += 4;\n        return int;\n    }\n    /**\n     * @inheritDoc\n     */\n    readI64() {\n        return this.readSignedBigInteger(8);\n    }\n    /**\n     * @inheritDoc\n     */\n    readSignedBigInteger(noBytes) {\n        const buffer = this.readBytes(noBytes);\n        return new bn_js_1.default(buffer, \"le\").fromTwos(8 * noBytes);\n    }\n    /**\n     * @inheritDoc\n     */\n    readU8() {\n        const byte = this.buffer.readUInt8(this.offset);\n        this.offset++;\n        return byte;\n    }\n    /**\n     * @inheritDoc\n     */\n    readU16() {\n        const short = this.buffer.readUInt16LE(this.offset);\n        this.offset += 2;\n        return short;\n    }\n    /**\n     * @inheritDoc\n     */\n    readU32() {\n        const int = this.buffer.readUInt32LE(this.offset);\n        this.offset += 4;\n        return int;\n    }\n    /**\n     * @inheritDoc\n     */\n    readU64() {\n        return this.readUnsignedBigInteger(8);\n    }\n    /**\n     * @inheritDoc\n     */\n    readUnsignedBigInteger(noBytes) {\n        const buffer = this.readBytes(noBytes);\n        return new bn_js_1.default(buffer, \"le\");\n    }\n    /**\n     * @inheritDoc\n     */\n    readString() {\n        const stringLength = this.readI32();\n        return this.readBytes(stringLength).toString(\"utf8\");\n    }\n    /**\n     * @inheritDoc\n     */\n    readRemaining() {\n        return this.readBytes(this.buffer.length - this.offset);\n    }\n    /**\n     * @inheritDoc\n     */\n    skipBytes(skip) {\n        if (skip < 0) {\n            throw new Error(\"Must skip a non negative number of bytes\");\n        }\n        if (this.buffer.length < this.offset + skip) {\n            throw new Error(\"Cannot skip past buffer size\");\n        }\n        this.offset += skip;\n    }\n}\nexports.LittleEndianByteInput = LittleEndianByteInput;\n//# sourceMappingURL=LittleEndianByteInput.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2VjYXRhLXB1YmxpYy9iaXRtYW5pcHVsYXRpb24tdHMvdGFyZ2V0L21haW4vTGl0dGxlRW5kaWFuQnl0ZUlucHV0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLGdDQUFnQyxtQkFBTyxDQUFDLDhEQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQHNlY2F0YS1wdWJsaWMvYml0bWFuaXB1bGF0aW9uLXRzL3RhcmdldC9tYWluL0xpdHRsZUVuZGlhbkJ5dGVJbnB1dC5qcz82NDZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXR0bGVFbmRpYW5CeXRlSW5wdXQgPSB2b2lkIDA7XG5jb25zdCBibl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJibi5qc1wiKSk7XG4vKipcbiAqIFJlYWRlciBvZiBhbiBpbnB1dCBzdHJlYW0sIGNhbiByZWFkIGRpZmZlcmVudCB0eXBlcyBvZiBiYXNpYyB0eXBlcy4gUmVhZHMgaW4gbGl0dGxlLWVuZGlhblxuICogZm9ybWF0LlxuICovXG5jbGFzcyBMaXR0bGVFbmRpYW5CeXRlSW5wdXQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgbGl0dGxlLWVuZGlhbiBzdHJlYW0gYmFzZWQgb24gYW4gaW5wdXQgYnVmZmVyLlxuICAgICAqIEBwYXJhbSBidWZmZXIgdGhlIGJ1ZmZlciB0byB3cmFwLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGJ1ZmZlcikge1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHJlYWRCb29sZWFuKCkge1xuICAgICAgICBjb25zdCBib29sID0gdGhpcy5idWZmZXIucmVhZFVJbnQ4KHRoaXMub2Zmc2V0KSAhPT0gMDtcbiAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgcmV0dXJuIGJvb2w7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZEJ5dGVzKG5vQnl0ZXMpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbm9CeXRlcyk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IG5vQnl0ZXM7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoICE9PSBub0J5dGVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gcmVhZCBieXRlc1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHJlYWRJOCgpIHtcbiAgICAgICAgY29uc3QgYnl0ZSA9IHRoaXMuYnVmZmVyLnJlYWRJbnQ4KHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgcmV0dXJuIGJ5dGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZEkxNigpIHtcbiAgICAgICAgY29uc3Qgc2hvcnQgPSB0aGlzLmJ1ZmZlci5yZWFkSW50MTZMRSh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgIHJldHVybiBzaG9ydDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICByZWFkSTMyKCkge1xuICAgICAgICBjb25zdCBpbnQgPSB0aGlzLmJ1ZmZlci5yZWFkSW50MzJMRSh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiBpbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZEk2NCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFNpZ25lZEJpZ0ludGVnZXIoOCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZFNpZ25lZEJpZ0ludGVnZXIobm9CeXRlcykge1xuICAgICAgICBjb25zdCBidWZmZXIgPSB0aGlzLnJlYWRCeXRlcyhub0J5dGVzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBibl9qc18xLmRlZmF1bHQoYnVmZmVyLCBcImxlXCIpLmZyb21Ud29zKDggKiBub0J5dGVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICByZWFkVTgoKSB7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDgodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICByZXR1cm4gYnl0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICByZWFkVTE2KCkge1xuICAgICAgICBjb25zdCBzaG9ydCA9IHRoaXMuYnVmZmVyLnJlYWRVSW50MTZMRSh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgIHJldHVybiBzaG9ydDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICByZWFkVTMyKCkge1xuICAgICAgICBjb25zdCBpbnQgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDMyTEUodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gaW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHJlYWRVNjQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRVbnNpZ25lZEJpZ0ludGVnZXIoOCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZFVuc2lnbmVkQmlnSW50ZWdlcihub0J5dGVzKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMucmVhZEJ5dGVzKG5vQnl0ZXMpO1xuICAgICAgICByZXR1cm4gbmV3IGJuX2pzXzEuZGVmYXVsdChidWZmZXIsIFwibGVcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgcmVhZFN0cmluZygpIHtcbiAgICAgICAgY29uc3Qgc3RyaW5nTGVuZ3RoID0gdGhpcy5yZWFkSTMyKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRCeXRlcyhzdHJpbmdMZW5ndGgpLnRvU3RyaW5nKFwidXRmOFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICByZWFkUmVtYWluaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkQnl0ZXModGhpcy5idWZmZXIubGVuZ3RoIC0gdGhpcy5vZmZzZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHNraXBCeXRlcyhza2lwKSB7XG4gICAgICAgIGlmIChza2lwIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVzdCBza2lwIGEgbm9uIG5lZ2F0aXZlIG51bWJlciBvZiBieXRlc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoIDwgdGhpcy5vZmZzZXQgKyBza2lwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2tpcCBwYXN0IGJ1ZmZlciBzaXplXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IHNraXA7XG4gICAgfVxufVxuZXhwb3J0cy5MaXR0bGVFbmRpYW5CeXRlSW5wdXQgPSBMaXR0bGVFbmRpYW5CeXRlSW5wdXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaXR0bGVFbmRpYW5CeXRlSW5wdXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/LittleEndianByteInput.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/LittleEndianByteOutput.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@secata-public/bitmanipulation-ts/target/main/LittleEndianByteOutput.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LittleEndianByteOutput = void 0;\n/**\n * Writer to an output stream, can write different types of basic types. Writes in little-endian\n * format.\n */\nclass LittleEndianByteOutput {\n    /**\n     * Creates a LittleEndianByteOutput, runs the serialization and returns the bytes.\n     * @param serializer the serialization to happen\n     * @returns the serialized bytes\n     */\n    static serialize(serializer) {\n        const out = new LittleEndianByteOutput();\n        serializer(out);\n        return out.toBuffer();\n    }\n    /**\n     * Creates a new little-endian stream.\n     */\n    constructor() {\n        this.appendBuffer = (buffer) => {\n            this.buffer = Buffer.concat([this.buffer, buffer]);\n        };\n        this.buffer = Buffer.alloc(0);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeBytes(values) {\n        this.appendBuffer(values);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeBoolean(value) {\n        const buffer = Buffer.alloc(1);\n        buffer.writeUInt8(value ? 1 : 0, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeI8(value) {\n        const buffer = Buffer.alloc(1);\n        buffer.writeInt8(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeI16(value) {\n        const buffer = Buffer.alloc(2);\n        buffer.writeInt16LE(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeI32(value) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeInt32LE(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeI64(value) {\n        this.writeSignedBigInteger(value, 8);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeSignedBigInteger(value, noBytes) {\n        if (value.byteLength() > noBytes) {\n            throw new Error(`Cannot write BN as ${noBytes} bytes; requires at least ${value.byteLength()} bytes`);\n        }\n        const buffer = value.toTwos(noBytes * 8).toArrayLike(Buffer, \"le\", noBytes);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeU8(value) {\n        const buffer = Buffer.alloc(1);\n        buffer.writeUInt8(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeU16(value) {\n        const buffer = Buffer.alloc(2);\n        buffer.writeUInt16LE(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeU32(value) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeUInt32LE(value, 0);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeU64(value) {\n        this.writeUnsignedBigInteger(value, 8);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeUnsignedBigInteger(value, noBytes) {\n        if (value.cmpn(0) === -1) {\n            throw new Error(\"Value must be non negative\");\n        }\n        if (value.byteLength() > noBytes) {\n            throw new Error(`Cannot write BN as ${noBytes} bytes; requires at least ${value.byteLength()} bytes`);\n        }\n        const buffer = value.toArrayLike(Buffer, \"le\", noBytes);\n        this.appendBuffer(buffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    writeString(value) {\n        // Stryker disable next-line StringLiteral: is equivalent to Buffer.from(value, \"\"), but \"utf8\" kept for clarity\n        const strBuffer = Buffer.from(value, \"utf8\");\n        this.writeI32(strBuffer.length);\n        this.appendBuffer(strBuffer);\n    }\n    /**\n     * @inheritDoc\n     */\n    toBuffer() {\n        return this.buffer;\n    }\n}\nexports.LittleEndianByteOutput = LittleEndianByteOutput;\n//# sourceMappingURL=LittleEndianByteOutput.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2VjYXRhLXB1YmxpYy9iaXRtYW5pcHVsYXRpb24tdHMvdGFyZ2V0L21haW4vTGl0dGxlRW5kaWFuQnl0ZU91dHB1dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsU0FBUyxPQUFPLG9CQUFvQixvQkFBb0I7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFNBQVMsT0FBTyxvQkFBb0Isb0JBQW9CO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BzZWNhdGEtcHVibGljL2JpdG1hbmlwdWxhdGlvbi10cy90YXJnZXQvbWFpbi9MaXR0bGVFbmRpYW5CeXRlT3V0cHV0LmpzP2RlYmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpdHRsZUVuZGlhbkJ5dGVPdXRwdXQgPSB2b2lkIDA7XG4vKipcbiAqIFdyaXRlciB0byBhbiBvdXRwdXQgc3RyZWFtLCBjYW4gd3JpdGUgZGlmZmVyZW50IHR5cGVzIG9mIGJhc2ljIHR5cGVzLiBXcml0ZXMgaW4gbGl0dGxlLWVuZGlhblxuICogZm9ybWF0LlxuICovXG5jbGFzcyBMaXR0bGVFbmRpYW5CeXRlT3V0cHV0IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgTGl0dGxlRW5kaWFuQnl0ZU91dHB1dCwgcnVucyB0aGUgc2VyaWFsaXphdGlvbiBhbmQgcmV0dXJucyB0aGUgYnl0ZXMuXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZXIgdGhlIHNlcmlhbGl6YXRpb24gdG8gaGFwcGVuXG4gICAgICogQHJldHVybnMgdGhlIHNlcmlhbGl6ZWQgYnl0ZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgc2VyaWFsaXplKHNlcmlhbGl6ZXIpIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IExpdHRsZUVuZGlhbkJ5dGVPdXRwdXQoKTtcbiAgICAgICAgc2VyaWFsaXplcihvdXQpO1xuICAgICAgICByZXR1cm4gb3V0LnRvQnVmZmVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgbGl0dGxlLWVuZGlhbiBzdHJlYW0uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kQnVmZmVyID0gKGJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmJ1ZmZlciwgYnVmZmVyXSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jKDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlQnl0ZXModmFsdWVzKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kQnVmZmVyKHZhbHVlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgd3JpdGVCb29sZWFuKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygxKTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDgodmFsdWUgPyAxIDogMCwgMCk7XG4gICAgICAgIHRoaXMuYXBwZW5kQnVmZmVyKGJ1ZmZlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgd3JpdGVJOCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2MoMSk7XG4gICAgICAgIGJ1ZmZlci53cml0ZUludDgodmFsdWUsIDApO1xuICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihidWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlSTE2KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygyKTtcbiAgICAgICAgYnVmZmVyLndyaXRlSW50MTZMRSh2YWx1ZSwgMCk7XG4gICAgICAgIHRoaXMuYXBwZW5kQnVmZmVyKGJ1ZmZlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgd3JpdGVJMzIodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgICAgICBidWZmZXIud3JpdGVJbnQzMkxFKHZhbHVlLCAwKTtcbiAgICAgICAgdGhpcy5hcHBlbmRCdWZmZXIoYnVmZmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICB3cml0ZUk2NCh2YWx1ZSkge1xuICAgICAgICB0aGlzLndyaXRlU2lnbmVkQmlnSW50ZWdlcih2YWx1ZSwgOCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgd3JpdGVTaWduZWRCaWdJbnRlZ2VyKHZhbHVlLCBub0J5dGVzKSB7XG4gICAgICAgIGlmICh2YWx1ZS5ieXRlTGVuZ3RoKCkgPiBub0J5dGVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB3cml0ZSBCTiBhcyAke25vQnl0ZXN9IGJ5dGVzOyByZXF1aXJlcyBhdCBsZWFzdCAke3ZhbHVlLmJ5dGVMZW5ndGgoKX0gYnl0ZXNgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidWZmZXIgPSB2YWx1ZS50b1R3b3Mobm9CeXRlcyAqIDgpLnRvQXJyYXlMaWtlKEJ1ZmZlciwgXCJsZVwiLCBub0J5dGVzKTtcbiAgICAgICAgdGhpcy5hcHBlbmRCdWZmZXIoYnVmZmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICB3cml0ZVU4KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygxKTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDgodmFsdWUsIDApO1xuICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihidWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlVTE2KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygyKTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDE2TEUodmFsdWUsIDApO1xuICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihidWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlVTMyKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDMyTEUodmFsdWUsIDApO1xuICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihidWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlVTY0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMud3JpdGVVbnNpZ25lZEJpZ0ludGVnZXIodmFsdWUsIDgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHdyaXRlVW5zaWduZWRCaWdJbnRlZ2VyKHZhbHVlLCBub0J5dGVzKSB7XG4gICAgICAgIGlmICh2YWx1ZS5jbXBuKDApID09PSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUgbXVzdCBiZSBub24gbmVnYXRpdmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLmJ5dGVMZW5ndGgoKSA+IG5vQnl0ZXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHdyaXRlIEJOIGFzICR7bm9CeXRlc30gYnl0ZXM7IHJlcXVpcmVzIGF0IGxlYXN0ICR7dmFsdWUuYnl0ZUxlbmd0aCgpfSBieXRlc2ApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHZhbHVlLnRvQXJyYXlMaWtlKEJ1ZmZlciwgXCJsZVwiLCBub0J5dGVzKTtcbiAgICAgICAgdGhpcy5hcHBlbmRCdWZmZXIoYnVmZmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICB3cml0ZVN0cmluZyh2YWx1ZSkge1xuICAgICAgICAvLyBTdHJ5a2VyIGRpc2FibGUgbmV4dC1saW5lIFN0cmluZ0xpdGVyYWw6IGlzIGVxdWl2YWxlbnQgdG8gQnVmZmVyLmZyb20odmFsdWUsIFwiXCIpLCBidXQgXCJ1dGY4XCIga2VwdCBmb3IgY2xhcml0eVxuICAgICAgICBjb25zdCBzdHJCdWZmZXIgPSBCdWZmZXIuZnJvbSh2YWx1ZSwgXCJ1dGY4XCIpO1xuICAgICAgICB0aGlzLndyaXRlSTMyKHN0ckJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihzdHJCdWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIHRvQnVmZmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXI7XG4gICAgfVxufVxuZXhwb3J0cy5MaXR0bGVFbmRpYW5CeXRlT3V0cHV0ID0gTGl0dGxlRW5kaWFuQnl0ZU91dHB1dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxpdHRsZUVuZGlhbkJ5dGVPdXRwdXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/LittleEndianByteOutput.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@secata-public/bitmanipulation-ts/target/main/index.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BitInput = exports.BitOutput = exports.LittleEndianByteInput = exports.BigEndianByteInput = exports.LittleEndianByteOutput = exports.BigEndianByteOutput = exports.BN = void 0;\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(action-browser)/./node_modules/bn.js/lib/bn.js\"));\nexports.BN = bn_js_1.default;\nvar BigEndianByteOutput_1 = __webpack_require__(/*! ./BigEndianByteOutput */ \"(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BigEndianByteOutput.js\");\nObject.defineProperty(exports, \"BigEndianByteOutput\", ({ enumerable: true, get: function () { return BigEndianByteOutput_1.BigEndianByteOutput; } }));\nvar LittleEndianByteOutput_1 = __webpack_require__(/*! ./LittleEndianByteOutput */ \"(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/LittleEndianByteOutput.js\");\nObject.defineProperty(exports, \"LittleEndianByteOutput\", ({ enumerable: true, get: function () { return LittleEndianByteOutput_1.LittleEndianByteOutput; } }));\nvar BigEndianByteInput_1 = __webpack_require__(/*! ./BigEndianByteInput */ \"(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BigEndianByteInput.js\");\nObject.defineProperty(exports, \"BigEndianByteInput\", ({ enumerable: true, get: function () { return BigEndianByteInput_1.BigEndianByteInput; } }));\nvar LittleEndianByteInput_1 = __webpack_require__(/*! ./LittleEndianByteInput */ \"(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/LittleEndianByteInput.js\");\nObject.defineProperty(exports, \"LittleEndianByteInput\", ({ enumerable: true, get: function () { return LittleEndianByteInput_1.LittleEndianByteInput; } }));\nvar BitOutput_1 = __webpack_require__(/*! ./BitOutput */ \"(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BitOutput.js\");\nObject.defineProperty(exports, \"BitOutput\", ({ enumerable: true, get: function () { return BitOutput_1.BitOutput; } }));\nvar BitInput_1 = __webpack_require__(/*! ./BitInput */ \"(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/BitInput.js\");\nObject.defineProperty(exports, \"BitInput\", ({ enumerable: true, get: function () { return BitInput_1.BitInput; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2VjYXRhLXB1YmxpYy9iaXRtYW5pcHVsYXRpb24tdHMvdGFyZ2V0L21haW4vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyxpQkFBaUIsR0FBRyw2QkFBNkIsR0FBRywwQkFBMEIsR0FBRyw4QkFBOEIsR0FBRywyQkFBMkIsR0FBRyxVQUFVO0FBQzdLLGdDQUFnQyxtQkFBTyxDQUFDLDhEQUFPO0FBQy9DLFVBQVU7QUFDViw0QkFBNEIsbUJBQU8sQ0FBQyxtSUFBdUI7QUFDM0QsdURBQXNELEVBQUUscUNBQXFDLHFEQUFxRCxFQUFDO0FBQ25KLCtCQUErQixtQkFBTyxDQUFDLHlJQUEwQjtBQUNqRSwwREFBeUQsRUFBRSxxQ0FBcUMsMkRBQTJELEVBQUM7QUFDNUosMkJBQTJCLG1CQUFPLENBQUMsaUlBQXNCO0FBQ3pELHNEQUFxRCxFQUFFLHFDQUFxQyxtREFBbUQsRUFBQztBQUNoSiw4QkFBOEIsbUJBQU8sQ0FBQyx1SUFBeUI7QUFDL0QseURBQXdELEVBQUUscUNBQXFDLHlEQUF5RCxFQUFDO0FBQ3pKLGtCQUFrQixtQkFBTyxDQUFDLCtHQUFhO0FBQ3ZDLDZDQUE0QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUNySCxpQkFBaUIsbUJBQU8sQ0FBQyw2R0FBWTtBQUNyQyw0Q0FBMkMsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDbEgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BzZWNhdGEtcHVibGljL2JpdG1hbmlwdWxhdGlvbi10cy90YXJnZXQvbWFpbi9pbmRleC5qcz8xOGY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CaXRJbnB1dCA9IGV4cG9ydHMuQml0T3V0cHV0ID0gZXhwb3J0cy5MaXR0bGVFbmRpYW5CeXRlSW5wdXQgPSBleHBvcnRzLkJpZ0VuZGlhbkJ5dGVJbnB1dCA9IGV4cG9ydHMuTGl0dGxlRW5kaWFuQnl0ZU91dHB1dCA9IGV4cG9ydHMuQmlnRW5kaWFuQnl0ZU91dHB1dCA9IGV4cG9ydHMuQk4gPSB2b2lkIDA7XG5jb25zdCBibl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJibi5qc1wiKSk7XG5leHBvcnRzLkJOID0gYm5fanNfMS5kZWZhdWx0O1xudmFyIEJpZ0VuZGlhbkJ5dGVPdXRwdXRfMSA9IHJlcXVpcmUoXCIuL0JpZ0VuZGlhbkJ5dGVPdXRwdXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCaWdFbmRpYW5CeXRlT3V0cHV0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCaWdFbmRpYW5CeXRlT3V0cHV0XzEuQmlnRW5kaWFuQnl0ZU91dHB1dDsgfSB9KTtcbnZhciBMaXR0bGVFbmRpYW5CeXRlT3V0cHV0XzEgPSByZXF1aXJlKFwiLi9MaXR0bGVFbmRpYW5CeXRlT3V0cHV0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTGl0dGxlRW5kaWFuQnl0ZU91dHB1dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTGl0dGxlRW5kaWFuQnl0ZU91dHB1dF8xLkxpdHRsZUVuZGlhbkJ5dGVPdXRwdXQ7IH0gfSk7XG52YXIgQmlnRW5kaWFuQnl0ZUlucHV0XzEgPSByZXF1aXJlKFwiLi9CaWdFbmRpYW5CeXRlSW5wdXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCaWdFbmRpYW5CeXRlSW5wdXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJpZ0VuZGlhbkJ5dGVJbnB1dF8xLkJpZ0VuZGlhbkJ5dGVJbnB1dDsgfSB9KTtcbnZhciBMaXR0bGVFbmRpYW5CeXRlSW5wdXRfMSA9IHJlcXVpcmUoXCIuL0xpdHRsZUVuZGlhbkJ5dGVJbnB1dFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxpdHRsZUVuZGlhbkJ5dGVJbnB1dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTGl0dGxlRW5kaWFuQnl0ZUlucHV0XzEuTGl0dGxlRW5kaWFuQnl0ZUlucHV0OyB9IH0pO1xudmFyIEJpdE91dHB1dF8xID0gcmVxdWlyZShcIi4vQml0T3V0cHV0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQml0T3V0cHV0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCaXRPdXRwdXRfMS5CaXRPdXRwdXQ7IH0gfSk7XG52YXIgQml0SW5wdXRfMSA9IHJlcXVpcmUoXCIuL0JpdElucHV0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQml0SW5wdXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJpdElucHV0XzEuQml0SW5wdXQ7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@secata-public/bitmanipulation-ts/target/main/index.js\n");

/***/ })

};
;